# 9k risc-v cpu server for tinyemu
dev +dev
	root
	cons
	arch
	env
	pipe
	proc
	mnt
	srv
	dup
	uart

uart +dev
	uarti8250

misc +dev
	nocache

boot cpu
	tcp

rootdir
	boot$CONF.out		boot

conf
	#include "riscv64.h"

	int cpuserver = 1;
	uvlong cpuhz = 34*1000*1000;  /* from timesync, emulated on 3ghz nuc */
	uvlong timebase = 10*1000*1000;	/* clint ticks per second */
	Membank membanks[] = {	 	/* (address, size) pairs */
		PHYSMEM, BANK0SIZE,
		0
	};
	char defnvram[] = "/boot/nvram";

	uintptr uartregs[] = { PAUart0 };
	int nuart = nelem(uartregs);
	vlong uartfreq = 384000;

	uchar ether0mac[] = { 2, 0, 0, 0, 0, 1 };

	/* the emulated plic doesn't seem to follow the spec; we ignore it. */
	Soc soc = {
		.clint	= (char *)PAClint,
		.uart	= (char *)PAUart0,
		.plic	= (char *)0x40100000,
		.ether[0] = (char *)0x40011000,
		.hobbled = 0,		/* only 1 hart */
		.tinyemuuart = 1,
	};
	Ioconf socconf[] = { /* devices without drivers that vmap their regs */
		{ "clint", 64*KB, &soc.clint, },
		{ "uart",  PGSZ, &soc.uart, 1, },
		{ "plic",   4*MB, &soc.plic, },		/* common but smaller */
		0
	};
	Ioconf ioconfs[] = {	/* devices whose drivers vmap their regs */
		0
	};

riscv64
	start
	low
	mtrap
	strap
	mch
	main
	arch
	archrv
	csr
	fp
	fpu
	ioconf
	map
	memory
	mmu
	fakepci
	sane
	fakesbi
	sbi
	trap
port
	alarm
	allocb
	awaitbit
	byteserial
	chan
	ctype
	dev
	devtab
	edf
	fault
	image
#	latin1
	logpow
	page
	parse
	pgrp
	portclock
	prf
	print
	proc
	ps
	qio
	qlock
	qmalloc
	random
	rebootcmd
	segment
	sysauth
	sysfile
	taslock
	tod
	watermarks

#
# controls which directories to look in for source files; must be relative to ..
#
dir
	port

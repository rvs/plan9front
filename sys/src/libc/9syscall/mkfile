NPROC=1
</$objtype/mkfile

install:V:
	# 32-bit architectures pass address of vlong return values as a hidden
	# first argument, requiring fix-up afterwards for error returns.
	#
	# For architectures which pass the first argument in a register,
	# if the system call takes no arguments, there will be no 'a0+0(FP)'
	# reserved on the stack, so do not store that register to the stack.
	# On 32-bit architectures, vlong functions will have at least one
	# argument (the return value address), so this should only be an
	# issue on 64-bit systems.
	#
	# List such system calls here.
	niladic = (nsec)
	#
	SYS=`{sed '/^#define._X[123]/d; s/#define.([A-Z0-9_]*).*/\1/' sys.h}
	for(I in $SYS) {
		i=`{echo $I|tr A-Z a-z}
		n=`{sed -n '/[ 	]'$I'[ 	]/s/.*	//p' sys.h}
		if(~ $i exits) i=_exits
		{switch($objtype){
		case mips
			echo TEXT $i'(SB)', 1, '$0'
			echo MOVW R1, '0(FP)'
			echo MOVW '$'$n, R1
			echo SYSCALL
			# seek & nsec take address of return value as 1st arg.
			if(~ $i seek || ~ $i nsec) {
				echo 'MOVW $-1,R5
				BNE R1,R5,4(PC)
				MOVW a+0(FP),R5
				MOVW R1,0(R5)
				MOVW R1,4(R5)'
			}
			echo RET
		case mips2
			echo TEXT $i'(SB)', 1, '$0'
			echo MOVW R1, '0(FP)'
			echo MOVW '$'$n, R1
			echo ADD '$4',R29
			echo SYSCALL
			echo ADD '$-4',R29
			echo RET
		case spim
			echo TEXT $i'(SB)', 1, '$0'
			echo MOVW R1, '0(FP)'
			echo MOVW '$'$n, R1
			echo ADD '$4',R29
			echo SYSCALL
			echo ADD '$-4',R29
			# seek & nsec take address of return value as 1st arg.
			if(~ $i seek || ~ $i nsec) {
				echo 'MOVW $-1,R5
				BNE R1,R5,4(PC)
				MOVW a+0(FP),R5
				MOVW R1,0(R5)
				MOVW R1,4(R5)'
			}
			echo RET
		case 386
			echo TEXT $i'(SB)', 1, '$0'
			echo MOVL '$'$n, AX
			echo INT '$'64
			# seek & nsec take address of return value as 1st arg.
			if(~ $i seek || ~ $i nsec) {
				echo 'CMPL AX,$-1
				JNE 4(PC)
				MOVL a+0(FP),CX
				MOVL AX,0(CX)
				MOVL AX,4(CX)'
			}
			echo RET
		case amd64
			if(~ $i seek)
				echo TEXT _seek'(SB)', 1, '$0'
			if not
				echo TEXT $i'(SB)', 1, '$0'
			#
			# For architectures which pass the first argument
			# in a register, if the system call takes no arguments
			# there will be no 'a0+0(FP)' reserved on the stack.
			#
			if(! ~ $i $niladic)
				echo MOVQ RARG, 'a0+0(FP)'
			echo MOVQ '$'$n, RARG
			echo SYSCALL
			echo RET
		case sparc
			echo TEXT $i'(SB)', 1, '$0'
			echo MOVW R7, '0(FP)'
			echo MOVW '$'$n, R7
			echo TA R0
			# seek & nsec take address of return value as 1st arg.
			if(~ $i seek || ~ $i nsec) {
				echo 'CMP R7,$-1
				BNE 4(PC)
				MOVW a+0(FP),R8
				MOVW R7,0(R8)
				MOVW R7,4(R8)'
			}
			echo RETURN
		case arm
			echo TEXT $i'(SB)', 1, '$0'
			echo MOVW R0, '0(FP)'
			echo MOVW '$'$n, R0
			echo SWI 0
			# seek & nsec take address of return value as 1st arg.
			if(~ $i seek || ~ $i nsec) {
				echo 'CMP $-1,R0
				BNE 4(PC)
				MOVW a+0(FP),R1
				MOVW R0,0(R1)
				MOVW R0,4(R1)'
			}
			echo RET
		case arm64
			if(~ $i seek)
				echo TEXT _seek'(SB)', 1, '$0'
			if not
				echo TEXT $i'(SB)', 1, '$0'
			if(! ~ $i $niladic)
				echo MOV R0, 'a0+0(FP)'
			echo SVC '$'$n
			echo RETURN
		case power
			echo TEXT $i'(SB)', 1, '$0'
			echo MOVW R3, '0(FP)'
			echo MOVW '$'$n, R3
			echo SYSCALL
			# seek & nsec take address of return value as 1st arg.
			if(~ $i seek || ~ $i nsec) {
				echo 'CMP R3,$-1
				BNE 4(PC)
				MOVW a+0(FP),R8
				MOVW R3,0(R8)
				MOVW R3,4(R8)'
			}
			echo RETURN
		case power64
			if(~ $i seek)
				echo TEXT _seek'(SB)', 1, '$0'
			if not
				echo TEXT $i'(SB)', 1, '$0'
			if(! ~ $i $niladic)
				echo MOVD R3, '0(FP)'
			echo MOVW '$'$n, R3
			echo SYSCALL
			echo RETURN
		case riscv
			# riscv is weird.  ic requires 8-byte sp alignment.
			# syscall args have already been pushed on the stack,
			# followed by return PC of XLEN bytes.
			echo TEXT $i'(SB)', 1, '$0'
			echo MOV R8, '0(FP)'
			echo MOV '$'$n, R8
			echo ECALL
			# seek & nsec take address of return value as 1st arg.
			if(~ $i seek) {
				echo 'MOV $-1, R10
				BNE R8, R10, 4(PC)
				MOV a+0(FP),R10
				MOV R8,0(R10)
				MOV R8,4(R10)'
			}
			if(~ $i nsec) {
				# always copy result (in R8 & R9) via R10
				echo 'MOV a+0(FP),R10
				MOV R8,0(R10)
				MOV R9,4(R10)'
			}
			echo RET
		case riscv64
			if(~ $i seek)
				# sed s/SYSCALL/$n/ ../$objtype/$i.s
				echo TEXT _seek'(SB)', 1, '$0'
			if not
				echo TEXT $i'(SB)', 1, '$0'
			#
			# For architectures which pass the first
			# argument in a register, if the system call
			# takes no arguments there will be no
			# 'a0+0(FP)' reserved on the stack.
			#
			# jc doesn't widen longs to vlongs when pushing them.
			# so we have to be careful here to only push longs for
			# long first arguments.
			#
			switch ($i) {
			case nsec
				;
			case bind chdir exec _exits segbrk open  pipe create \
			    brk_ remove notify segdetach segfree segflush \
			    rendezvous unmount semacquire semrelease seek \
			    errstr stat wstat await tsemacquire
				echo MOV R8, '0(FP)'	# vlong or ptr
			case *
				echo MOVW R8, '0(FP)'	# long
			}
			echo MOV '$'$n, R8
			echo ECALL
			echo RET
		}} > $i.s
		$AS $i.s
	}
	ar vu /$objtype/lib/libc.a *.$O
	rm -f *.$O *.s

nuke clean:V:
	rm -f *.[$OS]

installall:V:
	for(objtype in $CPUS) mk install

update:V:
	update $UPDATEFLAGS mkfile sys.h

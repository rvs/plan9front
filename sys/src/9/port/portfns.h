void		accounttime(void);
void		addbootfile(char*, uchar*, ulong);
Timer*		addclock0link(void (*)(void), int);
int		addphysseg(Physseg*);
void		addwatchdog(Watchdog*);
long		adec(void*);
Block*		adjustblock(Block*, int);
long		ainc(void*);
void		alarmkproc(void*);
Block*		allocb(int);
int		anyhigher(void);
int		anyready(void);
void		_assert(char*);
Image*		attachimage(int, Chan*, ulong, ulong);
Page*		auxpage(void);
int		awaitbitpatms(void *vint, ulong mask, ulong wantpat, int ms);
int		awaitbitpat(void *vint, ulong mask, ulong wantpat);
void*		beputl(void *p, ulong l);
void*		beputvl(void *p, uvlong l);
Block*		bl2mem(uchar*, Block*, int);
int		blocklen(Block*);
ulong		blocksize(ulong);
void		bootlinks(void);
void		bpooladd(Blockpool *pool, int nblks);
Block*		bpoolallocb(Blockpool *);
void		bpoolfreeb(Blockpool *pool, Block *bp);
void		bpoolfree(Blockpool *pool);
void		bpoolinit(Blockpool *, int, int, void (*free)(Block *));
void		bpoolremove(Blockpool *pool, int nblks);
void		cachedel(Image*, ulong);
void		cachepage(Page*, Image*);
void		callwithureg(void(*)(Ureg*));
int		canlock(Lock*);
int		canpage(Proc*);
int		canqlock(QLock*);
int		canrlock(RWlock*);
Chan*		cclone(Chan*);
void		cclose(Chan*);
void		ccloseq(Chan*);
void		chandevinit(void);
void		chandevreset(void);
void		chandevshutdown(void);
void		chanfree(Chan*);
char*		chanpath(Chan*);
void		checkalarms(void);
void		checkb(Block*, char*);
ulong		checksum(void *vbuf, uint len);
void		cinit(void);
void		closeegrp(Egrp*);
void		closefgrp(Fgrp*);
void		closepgrp(Pgrp*);
void		closergrp(Rgrp*);
long		clrfpintr(void);
int		clz(Clzuint);
void		cmderror(Cmdbuf*, char*);
int		cmount(Chan**, Chan*, int, char*);
Block*		concatblock(Block*);
void		confinit(void);
int		consactive(void);
void		(*consdebug)(void);
void		copen(Chan*);
Block*		copyblock(Block*, int);
void		copypage(Page*, Page*);
int		countbits(ulong u);
void		countpagerefs(ulong*, int);
void		cpuactive(uint);
void		cpuinactive(uint);
int		cread(Chan*, uchar*, int, vlong);
void		cunmount(Chan*, Chan*);
void		cupdate(Chan*, uchar*, int, vlong);
void		cwrite(Chan*, uchar*, int, vlong);
Segment*	data2txt(Segment*);
ulong		dbgpc(Proc*);
long		decref(Ref*);
int		decrypt(void*, void*, int);
void		delay(int);
Proc*		dequeueproc(Schedq*, Proc*);
Chan*		devattach(int, char*);
Block*		devbread(Chan*, long, ulong);
long		devbwrite(Chan*, Block*, ulong);
Chan*		devclone(Chan*);
int		devconfig(int, char *, DevConf *);
void		devcreate(Chan*, char*, int, ulong);
void		devdir(Chan*, Qid, char*, vlong, char*, long, Dir*);
long		devdirread(Chan*, char*, long, Dirtab*, int, Devgen*);
Devgen		devgen;
void		devinit(void);
int		devno(int, int);
Chan*		devopen(Chan*, int, Dirtab*, int, Devgen*);
void		devpermcheck(char*, ulong, int);
void		devpower(int);
void		devremove(Chan*);
void		devreset(void);
void		devshutdown(void);
int		devstat(Chan*, uchar*, int, Dirtab*, int, Devgen*);
Walkqid*	devwalk(Chan*, Chan*, char**, int, Dirtab*, int, Devgen*);
int		devwstat(Chan*, uchar*, int);
int		disableintr(Intrcommon *, Intrsvcret (*f)(Ureg*, void*), void *, char *);
void		drawactive(int);
void		drawcmap(void);
void		dumpaproc(Proc*);
void		dumpregs(Ureg*);
void		dumpstack(void);
Fgrp*		dupfgrp(Fgrp*);
int		duppage(Page*);
Segment*	dupseg(Segment**, int, int);
void		dupswap(Page*);
char*		edfadmit(Proc*);
void		edfinit(Proc*);
int		edfready(Proc*);
void		edfrecord(Proc*);
void		edfrun(Proc*, int);
void		edfstop(Proc*);
void		edfyield(void);
void		ehciclockpoll(void);
int		ehciintr(Hci *);
int		emptystr(char*);
int		enableintr(Intrcommon *, Intrsvcret (*f)(Ureg*, void*), void *, char *);
int		encrypt(void*, void*, int);
void		envcpy(Egrp*, Egrp*);
int		eqchan(Chan*, Chan*, int);
int		eqchantdqid(Chan*, int, int, Qid, int);
int		eqqid(Qid, Qid);
void		error(char*);
long		execregs(ulong, ulong, ulong);
void		exhausted(char*);
void		exit(int);
uvlong		fastticks2ns(uvlong);
uvlong		fastticks2us(uvlong);
uvlong		fastticks(uvlong*);
int		fault(ulong, int);
void		fdclose(int, int);
Chan*		fdtochan(int, int, int, int);
int		findmount(Chan**, Mhead**, int, int, Qid);
int		fixfault(Segment*, ulong, int, int);
void		flushmmu(void);
void		forceclosefgrp(void);
void		forkchild(Proc*, Ureg*);
void		forkret(void);
void		freeb(Block*);
void		freeblist(Block*);
int		freebroken(void);
void		freepte(Segment*, Pte*);
void		getcolor(ulong, ulong*, ulong*, ulong*);
char*		getconfenv(void);
void		gotolabel(Label*);
int		haswaitq(void*);
void		hnputl(void*, uint);
void		hnputs(void*, ushort);
void		hnputv(void*, uvlong);
long		hostdomainwrite(char*, int);
long		hostownerwrite(char*, int);
void		hzsched(void);
Block*		iallocb(int);
void		iallocsummary(void);
long		ibrk(ulong, int);
void		ilock(Lock*);
long		incref(Ref*);
void		initmark(Watermark *, int, char *);
void		initseg(void);
int		iprint(char*, ...);
int		iscpuactive(uint);
void		isdir(Chan*);
int		iseve(void);
int		islo(void);
int		(*isokkernel)(int);
Segment*	isoverlap(Proc*, ulong, int);
int		ispages(void*);
int		isphysseg(char*);
#define		ISPOW2(i) (((i) & ((i) - 1)) == 0) /* see Hacker's Delight */
int		ispow2(uvlong);
int		isscsiread(int cmd);
int		isscsiwrite(int cmd);
void		iunlock(Lock*);
void		ixsummary(void);
int		kbdcr2nl(Queue*, int);
int		kbdgetmap(uint, int*, int*, Rune*);
int		kbdputc(Queue*, int);
void		kbdputmap(ushort, ushort, Rune);
void		kickpager(void);
void		killbig(char*);
void		kmesginit(void);
void		kproc(char*, void(*)(void*), void*);
void		kprocchild(Proc*, void (*)(void*), void*);
void		(*kproftimer)(ulong);
void		ksetenv(char*, char*, int);
void		kstrcpy(char*, char*, int);
void		kstrdup(char**, char*);
ulong		l2be(long);
long		latin1(Rune*, int);
long		lcycles(void);
void*		leputl(void *p, ulong l);
void*		leputvl(void *p, uvlong l);
int		lock(Lock*);
void		(*locknote)(void);
void		(*lockwake)(void);
int		log2(ulong);
void		logclose(Log*);
char*		logctl(Log*, int, char**, Logflag*);
void		log(Log*, int, char*, ...);
void		logn(Log*, int, void*, int);
void		logopen(Log*);
long		logread(Log*, void*, ulong, long);
Page*		lookpage(Image*, ulong);
Cmdtab*		lookupcmd(Cmdbuf*, Cmdtab*, int);
void		machinit(void);
void		_main(void);
Block*		mem2block(void *, ulong, int);
Block*		mem2bl(uchar*, int);
void		mfreeseg(Segment*, ulong, int);
void		microdelay(int);
uvlong		mk64fract(uvlong, uvlong);
void		mkqid(Qid*, vlong, ulong, int);
void		mmurelease(Proc*);
void		mmuswitch(Proc*);
Chan*		mntauth(Chan*, char*);
long		mntversion(Chan*, int, char*, int);
void		mountfree(Mount*);
void		mouseresize(void);
uvlong		ms2fastticks(ulong);
#define		MS2NS(n) (((vlong)(n))*1000000LL)
ulong		ms2tk(ulong);
ulong		ms2tk(ulong);
ulong		msize(void*);
void		mul64fract(uvlong*, uvlong, uvlong);
void		muxclose(Mnt*);
Chan*		namec(char*, int, int, ulong);
void		nameerror(char*, char*);
void		nanodelay(uvlong);
Chan*		newchan(void);
int		newfd(Chan*);
Mhead*		newmhead(Chan*);
Mount*		newmount(Mhead*, Chan*, int, char*);
Page*		newpage(int, Segment **, ulong);
Path*		newpath(char*);
Pgrp*		newpgrp(void);
Proc*		newproc(void);
Rgrp*		newrgrp(void);
Segment*	newseg(int, ulong, ulong);
void		nexterror(void);
uint		nhgetl(void*);
ushort		nhgets(void*);
uvlong		nhgetv(void*);
void		notemark(Watermark *, int);
int		notify(Ureg*);
int		nrand(int);
uvlong		ns2fastticks(uvlong);
int		okaddr(ulong, ulong, int);
int		openmode(ulong);
Block*		packblock(Block*);
Block*		padblock(Block*, int);
void		pagechainhead(Page*);
void		pageinit(void);
ulong		pagenumber(Page*);
void		pagersummary(void);
void		panic(char*, ...);
Cmdbuf*		parsecmd(char *a, int n);
void		pathclose(Path*);
ulong		perfticks(void);
void		pexit(char*, int);
void		pgrpcpy(Pgrp*, Pgrp*);
void		pgrpnote(ulong, char*, long, int);
void		pio(Segment *, ulong, ulong, Page **);
#define		poperror()		up->nerrlab--
void		portcountpagerefs(ulong*, int);
int		postnote(Proc*, int, char*, int);
int		pprint(char*, ...);
int		preempted(void);
void		prflush(void);
void		printinit(void);
ulong		procalarm(ulong);
void		procctl(Proc*);
void		procdump(void);
int		procfdprint(Chan*, int, int, char*, int);
void		procflushseg(Segment*);
int		procindex(ulong);
void		procinit0(void);
void		procpriority(Proc*, int, int);
Proc*		proctab(int);
void		procwired(Proc*, int);
Pte*		ptealloc(void);
Pte*		ptecpy(Pte*);
int		pullblock(Block**, int);
Block*		pullupblock(Block*, int);
Block*		pullupqueue(Queue*, int);
void		putimage(Image*);
void		putmhead(Mhead*);
void		putmmu(ulong, ulong, Page*);
void		putpage(Page*);
void		putseg(Segment*);
void		putstrn(char*, int);
void		putswap(Page*);
ulong		pwait(Waitmsg*);
void		qaddlist(Queue*, Block*);
Block*		qbread(Queue*, int);
long		qbwrite(Queue*, Block*);
Queue*		qbypass(void (*)(void*, Block*), void*);
int		qcanread(Queue*);
void		qclose(Queue*);
int		qconsume(Queue*, void*, int);
Block*		qcopy(Queue*, int, ulong);
int		qdiscard(Queue*, int);
void		qflush(Queue*);
void		qfree(Queue*);
int		qfull(Queue*);
Block*		qget(Queue*);
void		qhangup(Queue*, char*);
int		qisclosed(Queue*);
int		qiwrite(Queue*, void*, int);
int		qlen(Queue*);
void		qlock(QLock*);
void		qnoblock(Queue*, int);
Queue*		qopen(int, int, void (*)(void*), void*);
int		qpassnolim(Queue*, Block*);
int		qpass(Queue*, Block*);
int		qproduce(Queue*, void*, int);
void		qputback(Queue*, Block*);
long		qread(Queue*, void*, int);
Block*		qremove(Queue*);
void		qreopen(Queue*);
void		qsetlimit(Queue*, int);
void		qunlock(QLock*);
int		qwindow(Queue*);
int		qwrite(Queue*, void*, int);
void		randominit(void);
ulong		randomread(void*, ulong);
int		rand(void);
void		rdb(void);
void		readn(Chan *, void *, long);
int		readnum(ulong, char*, ulong, ulong, int);
int		readstr(ulong, char*, ulong, char*);
void		ready(Proc*);
void		rebootcmd(int, char**);
void		reboot(void*, void*, ulong);
void		relocateseg(Segment*, ulong);
void		renameuser(char*, char*);
void		resched(char*);
void		resrcwait(char*);
int		return0(void*);
void		rlock(RWlock*);
long		rtctime(void);
void		runlock(RWlock*);
Proc*		runproc(void);
void		savefpregs(FPsave*);
void		scheddump(void);
void		schedinit(void);
void		sched(void);
void		(*screenputs)(char*, int);
int		scsicmdlen(uint cmd);
ulong		seconds(void);
ulong		segattach(Proc*, ulong, char *, ulong, ulong);
void		segclock(ulong);
void		segpage(Segment*, Page*);
Segment*	seg(Proc*, ulong, int);
char*		seprintmark(char *, char *, Watermark *);
int		setcolor(ulong, ulong, ulong, ulong);
void		setkernur(Ureg*, Proc*);
int		setlabel(Label*);
void		setregisters(Ureg*, char*, char*, int);
void		setswapchan(Chan*);
char*		skipslash(char*);
void		sleep(Rendez*, int(*)(void*), void*);
void*		smalloc(ulong);
int		splhi(void);
int		spllo(void);
void		splx(int);
void		splxpc(int);
char*		srvname(Chan*);
int		swapcount(ulong);
int		swapfull(void);
void		swapinit(void);
void		timeradd(Timer*);
void		timerdel(Timer*);
void		timerintr(Ureg*, Tval);
void		timerset(Tval);
void		timersinit(void);
ulong		tk2ms(ulong);
#define		TK2MS(x) ((x)*(1000/HZ))
uvlong		tod2fastticks(vlong);
vlong		todget(vlong*);
void		todinit(void);
void		todsetfreq(vlong);
void		todset(vlong, vlong, int);
Block*		trimblock(Block*, int, int);
void		tsleep(Rendez*, int (*)(void*), void*, ulong);
int		uartctl(Uart*, char*);
int		uartgetc(void);
void		uartkick(void*);
void		uartmouse(Uart*, int (*)(Queue*, int), int);
void		uartputs(char*, int);
void		uartrecv(Uart*, char);
void		uartsetmouseputc(Uart*, int (*)(Queue*, int));
int		uartstageoutput(Uart*);
void		unbreak(Proc*);
void		uncachepage(Page*);
long		unionread(Chan*, void*, long);
void		unlock(Lock*);
uvlong		us2fastticks(uvlong);
void		userinit(void);
ulong		userpc(void);
long		userwrite(char*, int);
void		validaddr(ulong, ulong, int);
void		validname(char*, int);
char*		validnamedup(char*, int);
void		validstat(uchar*, int);
void*		vmemchr(void*, int, int);
extern void	(*proctrace)(Proc*, int, vlong); 
Proc*		wakeup(Rendez*);
int		walk(Chan**, char**, int, int, int*);
void		wlock(RWlock*);
void		wunlock(RWlock*);
void*		xalloc(ulong);
void*		xallocz(ulong, int);
void		xfree(void*);
void		xhole(ulong, ulong);
void		xinit(void);
int		xmerge(void*, void*);
void*		xspanalloc(ulong, int, ulong);
void		xsummary(void);
void		yield(void);
ulong		µs(void);

#pragma varargck argpos iprint	1
#pragma	varargck argpos	panic	1
#pragma varargck argpos pprint	1
